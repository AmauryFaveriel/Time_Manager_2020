
# Time-manager project CircleCI 2.0 configuration file
version: 2
jobs:
  test_client:
    docker:
      - image: circleci/node:lts
    working_directory: ~/time_manager/client
    steps:
      - checkout:
          path: ~/time_manager

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: yarn install --frozen-lockfile

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      # run tests and coverage !

      - run: yarn eslint

      - run: yarn prettier

      - run:
          name: abort if uncommitted files (coming from `yarn install` or `prettier`)
          command: git diff-index --quiet HEAD --

  build_test_back_end:  # runs not using Workflows must have a `build` job as entry point
    parallelism: 1  # run only one instance of this job
    docker:  # run the steps with Docker
      - image: circleci/elixir:1.8.2-otp-22  # ...with this image as the primary container; this is where all `steps` will run
        auth:
          username: $REGISTRY_USERNAME
          password: $REGISTRY_PASSWORD # context / project UI env-var reference
        environment:  # environment variables for primary container
          MIX_ENV: test
      - image: circleci/postgres:13.0  # database image
        auth:
          username: $REGISTRY_USERNAME
          password: $REGISTRY_PASSWORD  # context / project UI env-var reference
        environment:  # environment variables for database
          POSTGRES_USER: postgres
          POSTGRES_DB: app_test
          POSTGRES_PASSWORD:

    working_directory: ~/app  # directory where steps will run

    test_back_end:  # commands that comprise the `build` job
      - checkout  # check out source code to working directory

      - run: mix local.hex --force  # install Hex locally (without prompt)
      - run: mix local.rebar --force  # fetch a copy of rebar (without prompt)

      - restore_cache:  # restores saved mix cache
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          keys:  # list of cache keys, in decreasing specificity
            - v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
            - v1-mix-cache-{{ .Branch }}
            - v1-mix-cache
      - restore_cache:  # restores saved build cache
          keys:
            - v1-build-cache-{{ .Branch }}
            - v1-build-cache
      - run: mix do deps.get, compile  # get updated dependencies & compile them
      - save_cache:  # generate and store mix cache
          key: v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths: "deps"
      - save_cache: # don't forget to save a *build* cache, too
          key: v1-build-cache-{{ .Branch }}
          paths: "_build"

      - run:  # special utility that stalls main process until DB is ready
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run: mix test  # run all tests in project

      - store_test_results:  # upload junit test results for display in Test Summary
          # Read more: https://circleci.com/docs/2.0/collect-test-data/
          path: _build/test/lib/REPLACE_WITH_YOUR_APP_NAME

  build_client:
    docker:
      - image: circleci/node:lts

    working_directory: ~/repo

    steps:
      - checkout:
          path: ~/repo
      - setup_remote_docker
      - run:
          name: Create artifacts directory
          command: mkdir -p ~/repo/artifacts
      - run:
          name: Build client image
          command: docker build -t "${REGISTRY_USERNAME}/${DOCKER_CLIENT_IMAGE_NAME}:${CIRCLE_SHA1}" ~/repo/client
      - run:
          name: Save image in artifacts directory
          command: docker save "${REGISTRY_USERNAME}/${DOCKER_CLIENT_IMAGE_NAME}:${CIRCLE_SHA1}" -o ~/repo/artifacts/image_client
      - persist_to_workspace:
          root: artifacts
          paths:
            - image_client

  build_back_end:
    docker:
      - image: circleci/node:lts

    working_directory: ~/repo

    steps:
      - checkout:
          path: ~/repo
      - setup_remote_docker
      - run:
          name: Create artifacts directory
          command: mkdir -p ~/repo/artifacts
      - run:
          name: Build back-end image
          command: docker build -t "${REGISTRY_USERNAME}/${DOCKER_BACK_END_IMAGE_NAME}:${CIRCLE_SHA1}" ~/repo/server
      - run:
          name: Save image in artifacts directory
          command: docker save "${REGISTRY_USERNAME}/${DOCKER_BACK_END_IMAGE_NAME}:${CIRCLE_SHA1}" -o ~/repo/artifacts/image_back_end
      - persist_to_workspace:
          root: artifacts
          paths:
            - image_back_end

  push_image_client:
    docker:
      - image: circleci/node:lts
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /home/circleci/repo/artifacts
      - run:
          name: Connect to docker hub
          command: docker login $REGISTRY_ENDPOINT --username $REGISTRY_USERNAME --password $REGISTRY_PASSWORD
      - run:
          name: Load docker image client
          command: docker load -i artifacts/image_client
      - run:
          name: Push docker image client
          command: docker push "${REGISTRY_USERNAME}/${DOCKER_CLIENT_IMAGE_NAME}:${CIRCLE_SHA1}"

  push_image_back_end:
    docker:
      - image: circleci/node:lts
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /home/circleci/repo/artifacts
      - run:
          name: Connect to docker hub
          command: docker login $REGISTRY_ENDPOINT --username $REGISTRY_USERNAME --password $REGISTRY_PASSWORD
      - run:
          name: Load docker image back-end
          command: docker load -i artifacts/image_back_end
      - run:
          name: Push docker image back-end
          command: docker push "${REGISTRY_USERNAME}/${DOCKER_BACK_END_IMAGE_NAME}:${CIRCLE_SHA1}"

workflows:
  version: 2
  build_and_test:
    jobs:
      - test_client
      - test_back_end
      - build_client:
          requires:
            - test_client
          filters:
            branches:
              only:
                - master
      - build_back_end:
          requires:
            - test_back_end
          filters:
            branches:
              only:
                - master
      - push_image_client:
          requires:
            - build_client
      - push_image_back_end:
          requires:
            - build_back_end